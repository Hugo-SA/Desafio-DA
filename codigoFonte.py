# -*- coding: utf-8 -*-
"""analise_sample_musicas_Versionfinal??.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V530yGeTCPxim9NklxNY-MiUDnaXSK8C

# Análise de Dataset de Letras de Música
"""

!pip install vaderSentiment

from google.colab import drive
drive.mount('/content/drive')

# Imports e parâmetros iniciais
import pandas as pd
import matplotlib.pyplot as plt
import re
import seaborn as sns
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer

dataset_path = '/content/drive/MyDrive/Estudos/lyrics.zip'  # Altere para o seu caminho
N = 100000  # quantidade de linhas da amostra

"""## Carregando a amostra do dataset"""

df_sample = pd.read_csv(dataset_path, nrows=N)
#df_sample = df_sample.sample(n=N, random_state=42) #para ler em ordem aleatória

df_sample = df_sample.drop(columns=['id', 'language_cld3', 'language_ft'])
df_sample.head()

"""## Função para identificar músicas por padrões nas letras"""

def contem_estruturas_de_musica(letra):
    if pd.isnull(letra):
        return False
    return bool(re.search(
        r'\[(intro|outro|chorus|refr[aã]o|bridge|verse|coro|solo|interlude|pre-chorus|verso|parte|hook|ponte)\]',
        letra, re.IGNORECASE))

"""## Identificar músicas em misc e separar das que não são"""

df_misc = df_sample[df_sample['tag'] == 'misc'].copy()
df_musicas = df_sample[df_sample['tag'] != 'misc'].copy()

# Identificar músicas dentro de misc
df_misc['parece_musica'] = df_misc['lyrics'].apply(contem_estruturas_de_musica)
df_misc_musicas = df_misc[df_misc['parece_musica']]

# Unir tudo
df_todas_musicas = pd.concat([df_musicas, df_misc_musicas], ignore_index=True).drop_duplicates(subset=['title', 'artist', 'year', 'lyrics'])

print(f"Músicas recuperadas de 'misc': {df_misc_musicas.shape[0]}")
print(f"Total de músicas na amostra: {df_todas_musicas.shape[0]}")
df_todas_musicas = df_todas_musicas.drop(columns=['parece_musica'])

"""# Análises básicas da amostra"""

# Informações gerais
print('Colunas disponíveis:', df_todas_musicas.columns.tolist())
print('\nResumo do DataFrame:')
print(df_todas_musicas.info())

# Informações sobre linguagem das músicas
print("Idiomas presentes na amostra:")
print(df_todas_musicas['language'].value_counts())

# Quantidade por tipo de obra
print('\nDistribuição por tipo:')
print(df_todas_musicas['tag'].value_counts())
sns.countplot(y='tag', data=df_todas_musicas, order=df_todas_musicas['tag'].value_counts().index)
plt.title('Distribuição por tipo de obra')
plt.show()

# Top 10 artistas mais frequentes
print('\nTop 10 artistas:')
print(df_todas_musicas['artist'].value_counts().head(10))
sns.countplot(y='artist', data=df_todas_musicas, order=df_todas_musicas['artist'].value_counts().head(10).index)
plt.title('Artistas mais frequentes')
plt.show()

# Distribuição por ano (filtrando entre 1900 e 2025)
plt.figure(figsize=(10,4))
df_plot = df_todas_musicas[(df_todas_musicas['year'] >= 1900) & (df_todas_musicas['year'] <= 2025)]
sns.histplot(df_plot['year'], bins=30, kde=False)
plt.title('Distribuição por ano (1900-2025)')
plt.xlabel('Ano')
plt.show()

# Distribuição de views
df_todas_musicas['views'].hist(bins=30)
plt.title('Distribuição de views das músicas (amostra)')
plt.xlabel('Views')
plt.ylabel('Qtd. de músicas')
plt.show()

print(df_todas_musicas[['title', 'artist', 'year']].sample(10))

"""## Limpeza básica das letras e remoção de nulos"""

# Função para remover tudo entre colchetes (inclusive os colchetes)
def remove_colchetes(texto):
    if pd.isnull(texto):
        return texto
    # Remove padrões como [qualquer coisa]
    return re.sub(r'\[[^\]]*\]', '', texto)

df_todas_musicas = df_todas_musicas.dropna(subset=['lyrics', 'artist'])
df_todas_musicas['lyrics'] = df_todas_musicas['lyrics'].astype(str).str.replace('\n', ' ').str.lower().str.strip()
# Remover colchetes e o texto entre eles
df_todas_musicas['lyrics'] = df_todas_musicas['lyrics'].apply(remove_colchetes)
df_todas_musicas['lyrics'] = df_todas_musicas['lyrics'].str.replace('  ', ' ', regex=False).str.strip()
df_todas_musicas = df_todas_musicas.reset_index(drop=True)

"""## Análises exploratórias rápidas (gráficos)"""

df_todas_musicas.head()

"""## Análise de sentimento com VADER

---



- Score contínuo
- Classificação precisa (threshold ±0.5)
"""

#VADER em ação
analyzer = SentimentIntensityAnalyzer()

def get_sentiment_score(texto):
    if pd.isnull(texto) or texto.strip() == '':
        return None
    return analyzer.polarity_scores(texto)['compound']

def get_polaridade_precisa(score):
    if pd.isnull(score):
        return None
    if score >= 0.5:
        return 'positivo'
    elif score <= -0.5:
        return 'negativo'
    else:
        return 'neutro'

df_todas_musicas['sentiment_score'] = df_todas_musicas['lyrics'].apply(get_sentiment_score)
df_todas_musicas['polaridade'] = df_todas_musicas['sentiment_score'].apply(get_polaridade_precisa)
df_todas_musicas.head()

"""## Evolução da polaridade de um artista ao longo do tempo

"""

artista_exemplo = df_todas_musicas['artist'].value_counts().index[0]  # artista mais frequente
artista_df = df_todas_musicas[df_todas_musicas['artist'] == artista_exemplo]
polaridade_ano = artista_df.groupby('year')['sentiment_score'].mean()
plt.plot(polaridade_ano.index, polaridade_ano.values, marker='o')
plt.title(f'Evolução da polaridade média de {artista_exemplo}')
plt.xlabel('Ano')
plt.ylabel('Polaridade média')
plt.show()

"""## Artistas com maior variação de polaridade ao longo do tempo"""

# Calcula o desvio da polaridade média por artista ao longo dos anos
var_por_artista = df_todas_musicas.groupby(['artist', 'year'])['sentiment_score'].mean().reset_index()
var_agg = var_por_artista.groupby('artist')['sentiment_score'].agg(['min', 'max'])
var_agg['var_range'] = var_agg['max'] - var_agg['min']
top_var = var_agg.sort_values('var_range', ascending=False).head(10)
print('Top 10 artistas com maior variação de polaridade ao longo do tempo:')
display(top_var)
# Visualização
plt.figure(figsize=(10,5))
sns.barplot(x=top_var.index, y=top_var['var_range'])
plt.title('Top 10 artistas com maior variação de polaridade')
plt.ylabel('Variação (máx - mín)')
plt.xlabel('Artista')
plt.xticks(rotation=45)
plt.show()

"""## Relação entre polaridade da música e views"""

if 'views' in df_todas_musicas.columns:
    plt.figure(figsize=(8,4))
    sns.scatterplot(x='sentiment_score', y='views', data=df_todas_musicas, alpha=0.5)
    plt.title('Relação entre polaridade e views')
    plt.xlabel('Polaridade (compound)')
    plt.ylabel('Views')
    plt.show()
    # Correlação
    corr = df_todas_musicas[['sentiment_score', 'views']].corr().iloc[0,1]
    print(f'Correlação entre polaridade e views: {corr:.3f}')
else:
    print('Coluna "views" não encontrada no DataFrame.')

"""# Visualização geral dos resultados"""

sns.histplot(df_todas_musicas['sentiment_score'], bins=30, kde=True)
plt.title('Distribuição dos scores de sentimento (compound)')
plt.xlabel('Sentiment Score')
plt.show()

sns.countplot(x='polaridade', data=df_todas_musicas, order=['positivo', 'neutro', 'negativo'])
plt.title('Distribuição de polaridade das letras')
plt.show()

"""# Exemplos de letras com sentimentos extremos"""

print('Letra mais positiva:')
display(df_todas_musicas.loc[df_todas_musicas['sentiment_score'].idxmax()][['title', 'artist', 'year', 'lyrics', 'sentiment_score']])

print('Letra mais negativa:')
display(df_todas_musicas.loc[df_todas_musicas['sentiment_score'].idxmin()][['title', 'artist', 'year', 'lyrics', 'sentiment_score']])